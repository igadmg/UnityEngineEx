<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ parameter name="statemachinename" type="System.String" #>
<#@ parameter name="floats" type="System.Collections.Generic.List<System.String>" #>
<#@ parameter name="ints" type="System.Collections.Generic.List<System.String>" #>
<#@ parameter name="bools" type="System.Collections.Generic.List<System.String>" #>
<#@ parameter name="triggers" type="System.Collections.Generic.List<System.String>" #>
using System;
using UnityEngine;
using UnityEngineEx;



[ExecuteInEditMode]
public class <#= this.statemachinename #>StateMachine : BaseStateMachine
{<# if (floats.Count != 0) { foreach (System.String floatName in floats) { #>
	private static readonly int Float<#= floatName #> = Animator.StringToHash("<#= floatName #>");
<# } #>

<# } if (ints.Count != 0) { foreach (System.String intName in ints) { #>
	private static readonly int Int<#= intName #> = Animator.StringToHash("<#= intName #>");
<# } #>

<# } if (bools.Count != 0) { foreach (System.String boolName in bools) { #>
	private static readonly int Bool<#= boolName #> = Animator.StringToHash("<#= boolName #>");
<# } #>

<# } if (triggers.Count != 0) { foreach (System.String triggerName in triggers) { #>
	private static readonly int Trigger<#= triggerName #> = Animator.StringToHash("<#= triggerName #>");
<# } } #>


	private Animator m_Animator;


<# if (floats.Count != 0) { foreach (System.String floatName in floats) { #>
	public float <#= floatName #> { get { return m_Animator.GetFloat(Float<#= floatName #>); } set { m_Animator.SetFloat(Float<#= floatName #>, value); } }
<# } #>

<# } if (ints.Count != 0) { foreach (System.String intName in ints) { #>
	public int <#= intName #> { get { return m_Animator.GetInt(Int<#= intName #>); } set { m_Animator.SetInt(Int<#= intName #>, value); } }
<# } #>

<# } if (bools.Count != 0) { foreach (System.String boolName in bools) { #>
	public bool <#= boolName #> { get { return m_Animator.GetBool(Bool<#= boolName #>); } set { m_Animator.SetBool(Bool<#= boolName #>, value); } }
<# } #>

<# } if (triggers.Count != 0) { foreach (System.String triggerName in triggers) { #>
	public void <#= triggerName #>() { m_Animator.SetTrigger(Trigger<#= triggerName #>); }
<# } } #>


	void Awake()
	{
		m_Animator = GetComponent<Animator>();
	}
}
