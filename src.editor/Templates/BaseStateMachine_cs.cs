// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace UnityEditorEx.src.editor.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal partial class BaseStateMachine_cs : BaseStateMachine_csBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing UnityEngine;\r\nusing UnityEngineEx;\r\n\r\n\r\n\r\nnamespace ");
            
            #line 20 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.namespacename));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t[ExecuteInEditMode]\r\n\tpublic partial class ");
            
            #line 23 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(this.typename));
            
            #line default
            #line hidden
            this.Write("StateMachine\r\n\t{");
            
            #line 24 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 if (floats.Count != 0) { foreach (System.String floatName in floats) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate static readonly int Float");
            
            #line 25 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(floatName));
            
            #line default
            #line hidden
            this.Write(" = Animator.StringToHash(\"");
            
            #line 25 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(floatName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t");
            
            #line 26 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 28 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } if (ints.Count != 0) { foreach (System.String intName in ints) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate static readonly int Int");
            
            #line 29 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(intName));
            
            #line default
            #line hidden
            this.Write(" = Animator.StringToHash(\"");
            
            #line 29 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(intName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t");
            
            #line 30 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 32 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } if (bools.Count != 0) { foreach (System.String boolName in bools) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate static readonly int Bool");
            
            #line 33 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(boolName));
            
            #line default
            #line hidden
            this.Write(" = Animator.StringToHash(\"");
            
            #line 33 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(boolName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t");
            
            #line 34 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 36 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } if (triggers.Count != 0) { foreach (System.String triggerName in triggers) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate static readonly int Trigger");
            
            #line 37 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write(" = Animator.StringToHash(\"");
            
            #line 37 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write("\");\r\n\t");
            
            #line 38 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t");
            
            #line 41 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 if (floats.Count != 0) { foreach (System.String floatName in floats) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic float ");
            
            #line 42 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(floatName));
            
            #line default
            #line hidden
            this.Write(" { get { return m_Animator.GetFloat(Float");
            
            #line 42 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(floatName));
            
            #line default
            #line hidden
            this.Write("); } set { m_Animator.SetFloat(Float");
            
            #line 42 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(floatName));
            
            #line default
            #line hidden
            this.Write(", value); } }\r\n\t");
            
            #line 43 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 45 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } if (ints.Count != 0) { foreach (System.String intName in ints) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic int ");
            
            #line 46 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(intName));
            
            #line default
            #line hidden
            this.Write(" { get { return m_Animator.GetInt(Int");
            
            #line 46 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(intName));
            
            #line default
            #line hidden
            this.Write("); } set { m_Animator.SetInt(Int");
            
            #line 46 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(intName));
            
            #line default
            #line hidden
            this.Write(", value); } }\r\n\t");
            
            #line 47 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 49 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } if (bools.Count != 0) { foreach (System.String boolName in bools) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic bool ");
            
            #line 50 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(boolName));
            
            #line default
            #line hidden
            this.Write(" { get { return m_Animator.GetBool(Bool");
            
            #line 50 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(boolName));
            
            #line default
            #line hidden
            this.Write("); } set { m_Animator.SetBool(Bool");
            
            #line 50 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(boolName));
            
            #line default
            #line hidden
            this.Write(", value); } }\r\n\t");
            
            #line 51 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 53 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } if (triggers.Count != 0) { foreach (System.String triggerName in triggers) { 
            
            #line default
            #line hidden
            this.Write("\t\tpublic void ");
            
            #line 54 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write("() { m_Animator.SetTrigger(Trigger");
            
            #line 54 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(triggerName));
            
            #line default
            #line hidden
            this.Write("); }\r\n\t");
            
            #line 55 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } } 
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t\tprotected override void RegisterStateNamesGenerated()\r\n\t\t{\r\n\t\t\t");
            
            #line 60 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 if (states.Count != 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\tAddStateNames(");
            
            #line 61 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(System.String.Join(",", states.Select(s => "\"" + s + "\"").ToArray())));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 62 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t}\r\n\t}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "D:\workspace\UnityEx\Libraries\UnityEngineEx\src.editor\Templates\BaseStateMachine_cs.tt"

private string _namespacenameField;

/// <summary>
/// Access the namespacename parameter of the template.
/// </summary>
private string namespacename
{
    get
    {
        return this._namespacenameField;
    }
}

private string _typenameField;

/// <summary>
/// Access the typename parameter of the template.
/// </summary>
private string typename
{
    get
    {
        return this._typenameField;
    }
}

private global::System.Collections.Generic.List<System.String> _floatsField;

/// <summary>
/// Access the floats parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<System.String> floats
{
    get
    {
        return this._floatsField;
    }
}

private global::System.Collections.Generic.List<System.String> _intsField;

/// <summary>
/// Access the ints parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<System.String> ints
{
    get
    {
        return this._intsField;
    }
}

private global::System.Collections.Generic.List<System.String> _boolsField;

/// <summary>
/// Access the bools parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<System.String> bools
{
    get
    {
        return this._boolsField;
    }
}

private global::System.Collections.Generic.List<System.String> _triggersField;

/// <summary>
/// Access the triggers parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<System.String> triggers
{
    get
    {
        return this._triggersField;
    }
}

private global::System.Collections.Generic.List<System.String> _statesField;

/// <summary>
/// Access the states parameter of the template.
/// </summary>
private global::System.Collections.Generic.List<System.String> states
{
    get
    {
        return this._statesField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public virtual void Initialize()
{
    if ((this.Errors.HasErrors == false))
    {
bool namespacenameValueAcquired = false;
if (this.Session.ContainsKey("namespacename"))
{
    this._namespacenameField = ((string)(this.Session["namespacename"]));
    namespacenameValueAcquired = true;
}
if ((namespacenameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("namespacename");
    if ((data != null))
    {
        this._namespacenameField = ((string)(data));
    }
}
bool typenameValueAcquired = false;
if (this.Session.ContainsKey("typename"))
{
    this._typenameField = ((string)(this.Session["typename"]));
    typenameValueAcquired = true;
}
if ((typenameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("typename");
    if ((data != null))
    {
        this._typenameField = ((string)(data));
    }
}
bool floatsValueAcquired = false;
if (this.Session.ContainsKey("floats"))
{
    this._floatsField = ((global::System.Collections.Generic.List<System.String>)(this.Session["floats"]));
    floatsValueAcquired = true;
}
if ((floatsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("floats");
    if ((data != null))
    {
        this._floatsField = ((global::System.Collections.Generic.List<System.String>)(data));
    }
}
bool intsValueAcquired = false;
if (this.Session.ContainsKey("ints"))
{
    this._intsField = ((global::System.Collections.Generic.List<System.String>)(this.Session["ints"]));
    intsValueAcquired = true;
}
if ((intsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ints");
    if ((data != null))
    {
        this._intsField = ((global::System.Collections.Generic.List<System.String>)(data));
    }
}
bool boolsValueAcquired = false;
if (this.Session.ContainsKey("bools"))
{
    this._boolsField = ((global::System.Collections.Generic.List<System.String>)(this.Session["bools"]));
    boolsValueAcquired = true;
}
if ((boolsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("bools");
    if ((data != null))
    {
        this._boolsField = ((global::System.Collections.Generic.List<System.String>)(data));
    }
}
bool triggersValueAcquired = false;
if (this.Session.ContainsKey("triggers"))
{
    this._triggersField = ((global::System.Collections.Generic.List<System.String>)(this.Session["triggers"]));
    triggersValueAcquired = true;
}
if ((triggersValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("triggers");
    if ((data != null))
    {
        this._triggersField = ((global::System.Collections.Generic.List<System.String>)(data));
    }
}
bool statesValueAcquired = false;
if (this.Session.ContainsKey("states"))
{
    this._statesField = ((global::System.Collections.Generic.List<System.String>)(this.Session["states"]));
    statesValueAcquired = true;
}
if ((statesValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("states");
    if ((data != null))
    {
        this._statesField = ((global::System.Collections.Generic.List<System.String>)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    internal class BaseStateMachine_csBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
