//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnityEditorEx.src.editor.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class BaseStateMachine_cs : BaseStateMachine_csBase {
        
        
        private string _namespacenameField;

        public string namespacename {
            get {
                return this._namespacenameField;
            }
        }

        private string _typenameField;

        public string typename {
            get {
                return this._typenameField;
            }
        }

        private System.Collections.Generic.List<System.String> _floatsField;

        public System.Collections.Generic.List<System.String> floats {
            get {
                return this._floatsField;
            }
        }

        private System.Collections.Generic.List<System.String> _intsField;

        public System.Collections.Generic.List<System.String> ints {
            get {
                return this._intsField;
            }
        }

        private System.Collections.Generic.List<System.String> _boolsField;

        public System.Collections.Generic.List<System.String> bools {
            get {
                return this._boolsField;
            }
        }

        private System.Collections.Generic.List<System.String> _triggersField;

        public System.Collections.Generic.List<System.String> triggers {
            get {
                return this._triggersField;
            }
        }

        private System.Collections.Generic.List<System.String> _statesField;

        public System.Collections.Generic.List<System.String> states {
            get {
                return this._statesField;
            }
        }

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 14 ""
            this.Write("using System;\nusing UnityEngine;\nusing UnityEngineEx;\n\n\n\nnamespace ");
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.namespacename ));
            
            #line default
            #line hidden
            
            #line 20 ""
            this.Write("\n{\n\t[ExecuteInEditMode]\n\tpublic class Base");
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( this.typename ));
            
            #line default
            #line hidden
            
            #line 23 ""
            this.Write("StateMachine : BaseStateMachine\n\t{");
            
            #line default
            #line hidden
            
            #line 24 ""
 if (floats.Count != 0) { foreach (System.String floatName in floats) { 
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write("\t\tprivate static readonly int Float");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( floatName ));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(" = Animator.StringToHash(\"");
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( floatName ));
            
            #line default
            #line hidden
            
            #line 25 ""
            this.Write("\");\n\t");
            
            #line default
            #line hidden
            
            #line 26 ""
 } 
            
            #line default
            #line hidden
            
            #line 27 ""
            this.Write("\n\t");
            
            #line default
            #line hidden
            
            #line 28 ""
 } if (ints.Count != 0) { foreach (System.String intName in ints) { 
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("\t\tprivate static readonly int Int");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( intName ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(" = Animator.StringToHash(\"");
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( intName ));
            
            #line default
            #line hidden
            
            #line 29 ""
            this.Write("\");\n\t");
            
            #line default
            #line hidden
            
            #line 30 ""
 } 
            
            #line default
            #line hidden
            
            #line 31 ""
            this.Write("\n\t");
            
            #line default
            #line hidden
            
            #line 32 ""
 } if (bools.Count != 0) { foreach (System.String boolName in bools) { 
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write("\t\tprivate static readonly int Bool");
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( boolName ));
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(" = Animator.StringToHash(\"");
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( boolName ));
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write("\");\n\t");
            
            #line default
            #line hidden
            
            #line 34 ""
 } 
            
            #line default
            #line hidden
            
            #line 35 ""
            this.Write("\n\t");
            
            #line default
            #line hidden
            
            #line 36 ""
 } if (triggers.Count != 0) { foreach (System.String triggerName in triggers) { 
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("\t\tprivate static readonly int Trigger");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( triggerName ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(" = Animator.StringToHash(\"");
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( triggerName ));
            
            #line default
            #line hidden
            
            #line 37 ""
            this.Write("\");\n\t");
            
            #line default
            #line hidden
            
            #line 38 ""
 } } 
            
            #line default
            #line hidden
            
            #line 39 ""
            this.Write("\n\n\t\tprivate Animator m_Animator;\n\n\n\t");
            
            #line default
            #line hidden
            
            #line 44 ""
 if (floats.Count != 0) { foreach (System.String floatName in floats) { 
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write("\t\tpublic float ");
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( floatName ));
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(" { get { return m_Animator.GetFloat(Float");
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( floatName ));
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write("); } set { m_Animator.SetFloat(Float");
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( floatName ));
            
            #line default
            #line hidden
            
            #line 45 ""
            this.Write(", value); } }\n\t");
            
            #line default
            #line hidden
            
            #line 46 ""
 } 
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("\n\t");
            
            #line default
            #line hidden
            
            #line 48 ""
 } if (ints.Count != 0) { foreach (System.String intName in ints) { 
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("\t\tpublic int ");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( intName ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(" { get { return m_Animator.GetInt(Int");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( intName ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write("); } set { m_Animator.SetInt(Int");
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( intName ));
            
            #line default
            #line hidden
            
            #line 49 ""
            this.Write(", value); } }\n\t");
            
            #line default
            #line hidden
            
            #line 50 ""
 } 
            
            #line default
            #line hidden
            
            #line 51 ""
            this.Write("\n\t");
            
            #line default
            #line hidden
            
            #line 52 ""
 } if (bools.Count != 0) { foreach (System.String boolName in bools) { 
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("\t\tpublic bool ");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( boolName ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(" { get { return m_Animator.GetBool(Bool");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( boolName ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("); } set { m_Animator.SetBool(Bool");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( boolName ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(", value); } }\n\t");
            
            #line default
            #line hidden
            
            #line 54 ""
 } 
            
            #line default
            #line hidden
            
            #line 55 ""
            this.Write("\n\t");
            
            #line default
            #line hidden
            
            #line 56 ""
 } if (triggers.Count != 0) { foreach (System.String triggerName in triggers) { 
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write("\t\tpublic void ");
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( triggerName ));
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write("() { m_Animator.SetTrigger(Trigger");
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( triggerName ));
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write("); }\n\t");
            
            #line default
            #line hidden
            
            #line 58 ""
 } } 
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write("\n\n\t\tprotected virtual void Awake()\n\t\t{\n\t\t\tm_Animator = GetComponent<Animator>();\n" +
                    "\n            ");
            
            #line default
            #line hidden
            
            #line 65 ""
 if (states.Count != 0) { 
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write("            AddStateNames(");
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(this.ToStringHelper.ToStringWithCulture(System.String.Join(",", states.Select(s => "\"" + s + "\"").ToArray())));
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(");\n            ");
            
            #line default
            #line hidden
            
            #line 67 ""
 } 
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write("\t\t}\n\t}\n}");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
            if ((this.Errors.HasErrors == false)) {
                bool _namespacenameAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("namespacename"))) {
                    object data = this.Session["namespacename"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._namespacenameField = ((string)(data));
                        _namespacenameAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'namespacename\' did not match the type " +
                                "passed to the template");
                    }
                }
                if ((_namespacenameAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("namespacename");
                    if ((data != null)) {
                        if (typeof(string).IsAssignableFrom(data.GetType())) {
                            this._namespacenameField = ((string)(data));
                            _namespacenameAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.String\' of the parameter \'namespacename\' did not match the type " +
                                    "passed to the template");
                        }
                    }
                }
                bool _typenameAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("typename"))) {
                    object data = this.Session["typename"];
                    if (typeof(string).IsAssignableFrom(data.GetType())) {
                        this._typenameField = ((string)(data));
                        _typenameAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.String\' of the parameter \'typename\' did not match the type passe" +
                                "d to the template");
                    }
                }
                if ((_typenameAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("typename");
                    if ((data != null)) {
                        if (typeof(string).IsAssignableFrom(data.GetType())) {
                            this._typenameField = ((string)(data));
                            _typenameAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.String\' of the parameter \'typename\' did not match the type passe" +
                                    "d to the template");
                        }
                    }
                }
                bool _floatsAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("floats"))) {
                    object data = this.Session["floats"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._floatsField = ((System.Collections.Generic.List<System.String>)(data));
                        _floatsAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'float" +
                                "s\' did not match the type passed to the template");
                    }
                }
                if ((_floatsAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("floats");
                    if ((data != null)) {
                        if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                            this._floatsField = ((System.Collections.Generic.List<System.String>)(data));
                            _floatsAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'float" +
                                    "s\' did not match the type passed to the template");
                        }
                    }
                }
                bool _intsAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("ints"))) {
                    object data = this.Session["ints"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._intsField = ((System.Collections.Generic.List<System.String>)(data));
                        _intsAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'ints\'" +
                                " did not match the type passed to the template");
                    }
                }
                if ((_intsAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ints");
                    if ((data != null)) {
                        if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                            this._intsField = ((System.Collections.Generic.List<System.String>)(data));
                            _intsAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'ints\'" +
                                    " did not match the type passed to the template");
                        }
                    }
                }
                bool _boolsAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("bools"))) {
                    object data = this.Session["bools"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._boolsField = ((System.Collections.Generic.List<System.String>)(data));
                        _boolsAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'bools" +
                                "\' did not match the type passed to the template");
                    }
                }
                if ((_boolsAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("bools");
                    if ((data != null)) {
                        if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                            this._boolsField = ((System.Collections.Generic.List<System.String>)(data));
                            _boolsAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'bools" +
                                    "\' did not match the type passed to the template");
                        }
                    }
                }
                bool _triggersAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("triggers"))) {
                    object data = this.Session["triggers"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._triggersField = ((System.Collections.Generic.List<System.String>)(data));
                        _triggersAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'trigg" +
                                "ers\' did not match the type passed to the template");
                    }
                }
                if ((_triggersAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("triggers");
                    if ((data != null)) {
                        if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                            this._triggersField = ((System.Collections.Generic.List<System.String>)(data));
                            _triggersAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'trigg" +
                                    "ers\' did not match the type passed to the template");
                        }
                    }
                }
                bool _statesAcquired = false;
                if (((this.Session != null) 
                            && this.Session.ContainsKey("states"))) {
                    object data = this.Session["states"];
                    if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                        this._statesField = ((System.Collections.Generic.List<System.String>)(data));
                        _statesAcquired = true;
                    }
                    else {
                        this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'state" +
                                "s\' did not match the type passed to the template");
                    }
                }
                if ((_statesAcquired == false)) {
                    object data = System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("states");
                    if ((data != null)) {
                        if (typeof(System.Collections.Generic.List<System.String>).IsAssignableFrom(data.GetType())) {
                            this._statesField = ((System.Collections.Generic.List<System.String>)(data));
                            _statesAcquired = true;
                        }
                        else {
                            this.Error("The type \'System.Collections.Generic.List<System.String>\' of the parameter \'state" +
                                    "s\' did not match the type passed to the template");
                        }
                    }
                }
            }

        }
    }
    
    public class BaseStateMachine_csBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
