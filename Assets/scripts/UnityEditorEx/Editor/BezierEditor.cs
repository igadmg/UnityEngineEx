using UnityEngine;
using UnityEditor;
 
[CustomEditor(typeof(Bezier))]
public class BezierEditor : Editor
{
    // ?????? ??????? ????????? ????????? ?????????? ??????????
    public override void OnInspectorGUI()
    {
        // ????????? ????????? ?????????? ?? ?????????
        DrawDefaultInspector();
 
        // ?????? ?? ?????????
        Bezier bezier = target as Bezier;
        if (bezier)
        {
            // ????????? ????? ?????? ??? ?? ?? 50-?? ????????
            float length = 0;
            for (int i = 1; i < 50; i++)
            {
                float t = (i - 1f) / 49f;
                float t1 = i / 49f;
                length += (bezier.Evaluate(t) - bezier.Evaluate(t1)).magnitude;
            }
 
            // ?????????? ????? ?????? ? ??????????
            GUILayout.Label(string.Format("Curve length: {0}", length));
        }
    }
 
    // ????????? ? ?????, ????? ? ??????? ?? ??????????, ??? ?? ????????????
    // ??? ????????? ????? Gizmos ???????????? ???? Handles (????????????)
    public void OnSceneGUI()
    {
 
        Bezier bezier = target as Bezier;
        if (bezier)
        {
            //???????? ????? ?????????????
            Handles.DrawLine(bezier.P0, bezier.P1);
            Handles.DrawLine(bezier.P2, bezier.P3);
 
            // ??? ?????? ??????????? ????? ??????? ??????????? ? ???? ?????
            Quaternion rot = Quaternion.identity;
            float size = HandleUtility.GetHandleSize(bezier.P0) * 0.2f;
            bezier.P0 = Handles.FreeMoveHandle(bezier.P0, rot, size, Vector3.zero, Handles.SphereCap);
            bezier.P1 = Handles.FreeMoveHandle(bezier.P1, rot, size, Vector3.zero, Handles.SphereCap);
            bezier.P2 = Handles.FreeMoveHandle(bezier.P2, rot, size, Vector3.zero, Handles.SphereCap);
            bezier.P3 = Handles.FreeMoveHandle(bezier.P3, rot, size, Vector3.zero, Handles.SphereCap);
        }
 
        // ???? ?? ??????? ??????????? ?????, ?? ?? ?????? ??????? ?????????,
        // ??? ?????? ????????? (???? "???????")
        if (GUI.changed)
            EditorUtility.SetDirty(target);
    }
 
}

